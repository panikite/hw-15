{"version":3,"sources":["img/comment.svg","img/retweet.svg","img/heart.svg","img/share.svg","component/interactionBar.js","component/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InteractionBar","comments","reposts","likes","className","src","comment_icon","alt","repost_icon","like_icon","share_icon","Post","author","content","image","date","style","backgroundImage","photo","name","nickname","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,iPCuB5BC,EAfQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,QAAQC,EAAY,EAAZA,MACvC,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAY,oBAAjB,IAAqC,yBAAKC,IAAOC,IAAcC,IAAI,uBAAnE,IAA0F,kCAAQN,EAAR,KAA1F,MACA,yBAAKG,UAAY,oBAAjB,IAAqC,yBAAKC,IAAOG,IAAaD,IAAI,sBAAlE,IAAwF,kCAAQL,EAAR,KAAxF,KACA,yBAAKE,UAAY,oBAAjB,IAAqC,yBAAKC,IAAOI,IAAWF,IAAI,oBAAhE,IAAoF,kCAAQJ,EAAR,KAApF,KACA,yBAAKC,UAAY,oBAAjB,IAAqC,yBAAKC,IAAOK,IAAYH,IAAI,oBAAjE,OCgBGI,G,MA1BF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,OAAOC,EAAwB,EAAxBA,QAAQC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,KAChC,OACI,yBAAKX,UAAY,gBACb,yBAAKA,UAAY,QACb,yBAAKA,UAAW,cAAcY,MAAS,CAAEC,gBAAgB,OAAD,OAASL,EAAOM,MAAhB,QACxD,yBAAKd,UAAW,gBACZ,yBAAKA,UAAW,eACZ,wBAAIA,UAAW,aAAaQ,EAAOO,MACnC,0BAAMf,UAAW,iBAAiBQ,EAAOQ,UACzC,0BAAMhB,UAAW,aAAaW,IAElC,uBAAGX,UAAY,aAAf,IAA6BS,EAA7B,KACA,yBAAKT,UAAY,WAAWY,MAAS,CAACC,gBAAgB,OAAD,OAASH,EAAT,QAErD,kBAAC,EAAD,CAAgBb,SAAY,IACZC,QAAW,IACXC,MAAS,WCS9BkB,MApBf,WAEE,OACE,yBAAKjB,UAAU,gBACb,kBAAC,EAAD,CAAMQ,OAAQ,CACJO,KAAM,mBACND,MAZK,6FAaLE,SAAU,eAEdP,QAAQ,kDACRC,MAdM,gGAeNC,KAAM,+BACNd,SAAU,IACVC,QAAS,IACTC,MAAO,QCXCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd812e2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.08ace6de.svg\";","module.exports = __webpack_public_path__ + \"static/media/retweet.12f33f8a.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.4a182492.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.535a8690.svg\";","import React from 'react';\r\nimport './interactionBar.css';\r\nimport comment_icon from '../img/comment.svg';\r\nimport repost_icon from '../img/retweet.svg';\r\nimport like_icon from '../img/heart.svg';\r\nimport share_icon from '../img/share.svg';\r\n\r\n\r\nconst InteractionBar = ({ comments,reposts,likes }) => {\r\n    return (\r\n        <div className=\"interaction_wrapper\">\r\n            <div className = \"interaction_info\"> <img src = {comment_icon} alt=\"number of comments\"/> <span> {comments} </span>  </div>\r\n            <div className = \"interaction_info\"> <img src = {repost_icon} alt=\"number of reposts\"/> <span> {reposts} </span> </div>\r\n            <div className = \"interaction_info\"> <img src = {like_icon} alt=\"number of likes\"/> <span> {likes} </span> </div>\r\n            <div className = \"interaction_info\"> <img src = {share_icon} alt=\"number of likes\"/> </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default InteractionBar;","import React from 'react';\r\nimport InteractionBar from './interactionBar';\r\nimport './post.css';\r\n\r\nconst Post = ({author,content,image,date}) => {\r\n    return (\r\n        <div className = \"post_wrapper\">\r\n            <div className = \"post\">\r\n                <div className =\"post_avatar\" style = {{ backgroundImage: `url(${author.photo})`}} ></div>\r\n                <div className =\"post_content\">\r\n                    <div className =\"post_author\">\r\n                        <h3 className =\"post_name\">{author.name}</h3>\r\n                        <span className =\"post_nickname\">{author.nickname}</span>\r\n                        <span className =\"post_date\">{date}</span>\r\n                    </div>\r\n                    <p className = \"post_text\"> {content} </p>\r\n                    <div className = \"post_img\" style = {{backgroundImage: `url(${image})`}} ></div>\r\n\r\n                    <InteractionBar comments = {482}\r\n                                    reposts = {146}\r\n                                    likes = {887}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Post;","import React from 'react';\nimport Post from '../src/component/post';\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"post_wrapper\">\n      <Post author={{\n                name: \"Anakin skywalker\",\n                photo: ANAKIN_IMAGE,\n                nickname: \"@dart_vader\"\n            }}\n            content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n            image={RAY_IMAGE}\n            date={\"26 февр.\"}\n            comments={482}\n            reposts={146}\n            likes={887}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}